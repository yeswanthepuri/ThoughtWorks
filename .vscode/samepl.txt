 Writing Fast tests Against Enterprise Rails 60min
OverDoing in Python 45min
Lua for the Masses for 30min
Ruby Errors from Mismatched Gem Versions 45min
Common Ruby Errors 45min
Rails for python Developers lightning
Communicating Over Distance 60min
Accounting-Driven Development 45min
Woah 30min
Sit Down and Write 30min
Pair Programming vs Noise 45min
Ralls magic 60min
Ruby on Rails:Why we Should Move on 60min
clojure Ate Scala(on my project) 45min
Programming in the Boondocks of seattle 30min
Ruby vs clojure for Back-End Development 30min
Ruby on Rails Legacy App Maintainance 60min
A world without HackerNews 30min
User Interface CSS in Rails Apps 30min

for (int i = 0; i <= NumberOfTracksNeeded-1; i++)
            {
                var timeInMinSession2 = 240;
                var timeInMinSession1 = 180;
                //Session Per Day
                for (int j = 0; j <= 1; j++)
                {
                    foreach (var item in talks)
                    {
                        if (j == 0 && (timeInMinSession1 >= item.Duration))
                        {

                                timeInMinSession1 -= item.Duration;
                                item.SessionAssigned = j;
                                item.TrackAssigned = i;
                        }
                        else if (timeInMinSession2 >= item.Duration)
                        {

                                timeInMinSession2 -= item.Duration;
                                item.SessionAssigned = j;
                                item.TrackAssigned = i;
                        }
                    }
                }


                for (int track = 0; track <= NumberOfTracksNeeded; track++)
            {
                var timeInMinSession1 = 180;
                var timeInMinSession2 = 240;
                foreach (var item in talks)
                {
                    if (item.Duration < timeInMinSession1 && !item.IsAssigned)
                    {
                        returnTalks[indexPosition] = item;
                        timeInMinSession1 -= item.Duration;
                        item.IsAssigned = true;
                        item.SessionAssigned =1;
                        item.TrackAssigned = indexPosition;
                        indexPosition++;
                    }
                    // if (timeInMinSession1 == 0)
                    // {
                    //     returnTalks[indexPosition] = new Talk() { Title = "Lunch" };
                    //     indexPosition++;
                    // }
                    else if (item.Duration < timeInMinSession2 && !item.IsAssigned)
                    {
                        returnTalks[indexPosition] = item;
                        timeInMinSession2 -= item.Duration;
                        item.IsAssigned = true;
                        item.SessionAssigned =2;
                        item.TrackAssigned = indexPosition;
                        indexPosition++;
                    }
                    // else if (timeInMinSession1 == 0 && timeInMinSession2 == 0)
                    // {
                    //     //TODO
                    // }
                }
            }
            



            for (var talk=0;talk < talksOrderbyPeriod.Count();talk++)
            {
                //Get the Most 
                var getSlots = slots.OrderByDescending(x => x.DayNumber)
                                    .ThenBy(x => x. PeriodInMin)
                                    .ThenBy(x => x.MorningOrEvening).ToList();

                for (int i = 0; i < getSlots.Count; i++)
                {
                    if (getSlots[i].PeriodInMin >= talksOrderbyPeriod[talk].Duration)
                    {
                        getSlots[i].PeriodInMin = getSlots[i].PeriodInMin - talksOrderbyPeriod[talk].Duration;
                        talksOrderbyPeriod[talk].IsAssigned = true;
                        talksOrderbyPeriod[talk].SessionAssigned=getSlots[i].ID;
                        break;
                    }
                }
            }